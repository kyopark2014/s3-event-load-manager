@startuml Sequence Diagram - Sprites

!define AWSPuml https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/master/dist
!includeurl AWSPuml/AWSCommon.puml
!includeurl AWSPuml/Compute/all.puml
!includeurl AWSPuml/Mobile/APIGateway.puml
!includeurl AWSPuml/General/InternetGateway.puml
!includeurl AWSPuml/Database/Database.puml
!includeurl AWSPuml/Database/DynamoDB.puml
!includeurl AWSPuml/Database/ElastiCache.puml
!includeurl AWSPuml/Storage/SimpleStorageServiceS3.puml
!includeurl AWSPuml/NetworkingAndContentDelivery/CloudFront.puml
!includeurl AWSPuml/ApplicationIntegration/SNS.puml
!includeurl AWSPuml/MachineLearning/Rekognition.puml
!includeurl AWSPuml/MachineLearning/Polly.puml
!includeurl AWSPuml/ApplicationIntegration/SQS.puml
!includeurl AWSPuml/MachineLearning/SageMaker.puml
!includeurl AWSPuml/MachineLearning/Kendra.puml
!includeurl AWSPuml/ApplicationIntegration/EventBridge.puml
!includeurl AWSPuml/ApplicationIntegration/StepFunctions.puml

'Comment out to use default PlantUML sequence formatting
skinparam participant {
    BackgroundColor AWS_BG_COLOR
    BorderColor AWS_BORDER_COLOR
}
'Hide the bottom boxes
hide footbox

participant "<color:#D86613><$ElasticKubernetesService></color>\nEKS" as eks
participant "<color:#green><$SimpleStorageServiceS3></color>\nAmazon S3" as s3
participant "<color:#D86613><$Lambda></color>\nAmazon Lambda\n(S3-event)" as lambda_s3
participant "<color:#red><$SQS></color>\nAmazon SQS" as sqs_event
participant "<color:#red><$EventBridge></color>\nAmazon EventBrdige" as event_bridge
participant "<color:#D86613><$Lambda></color>\nAmazon Lambda\n(schedular)" as lambda_schedular
participant "<color:#red><$SQS></color>\nAmazon SQS" as sqs_invoke
participant "<color:#D86613><$Lambda></color>\nAmazon Lambda\n(invoke)" as lambda_invoke
participant "<color:#red><$StepFunctions></color>\nAWS StepFunctions" as step_function

eks -> s3 : Push Objejcts

s3 -> lambda_s3 : Put Event

lambda_s3 -> sqs_event : event info

event_bridge -> lambda_schedular ++:  trigger periodically

lambda_schedular -> sqs_event ++: load message

sqs_event -> lambda_schedular --: event 

lambda_schedular -> sqs_invoke --: push event

sqs_invoke -> lambda_invoke ++: event

lambda_invoke -> step_function --: invoke operation

@enduml